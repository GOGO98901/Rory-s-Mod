/*
 * Copyright 2017 Rory Claasen
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'org.ajoberstar:grgit:1.1.0'
    }
}

import org.ajoberstar.grgit.*

repositories {
	maven {
		name "ic2"
		url "http://maven.ic2.player.to/"
	}
	maven {
		name 'CodeChicken'
		url 'http://chickenbones.net/maven/'
	}
	 maven {
        name "Mobius Repo"
        url "http://default.mobiusstrip.eu/maven/"
    }
	maven { url 'https://jitpack.io' }
}

apply plugin: 'forge'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

ext.repo = Grgit.open(project.file('.'))
def gitHash = 'unknown'

if (new File(projectDir, '.git').exists())
    gitHash = repo.log().find().abbreviatedId

configurations {
    embed
    compile.extendsFrom(embed)
}

dependencies {
	embed files("libs/javatuples-1.2.jar")
	
	embed 'me.roryclaasen:version-checker:gson1.2.2'
	
    compile files("libs/CoFHLib-[1.7.10]1.2.1-185-dev.jar")
    compile files("libs/MDK-1.7.10-9.1.0.281.jar")
    
    compile "codechicken:CodeChickenCore:${mc_version}-${chickenCore_version}:dev"
    compile "net.industrial-craft:industrialcraft-2:${ic2_version}:dev"
    compile "codechicken:CodeChickenLib:${mc_version}-${chickenLib_version}:dev"
    compile "codechicken:CodeChickenCore:${mc_version}-${chickenCore_version}:dev"
    compile "codechicken:NotEnoughItems:${mc_version}-${nei_version}:dev"
    compile "mcp.mobius.waila:Waila:${waila_version}_${mc_version}:dev"
}

version = "${mod_version}"
group = "me.roryclaasen"
archivesBaseName = "RorysMod"

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "eclipse"
    
    
	replace '@version@', project.version
    replaceIn "RorysMod.java"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }
        
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info', '**/psd/**'
    }
    
    from('./') {
      include 'licence.txt'
	}
}

def commonManifest = {
	attributes 'FMLAT': 'rorysmods_at.cfg'
    attributes 'FMLCorePlugin': 'me.roryclaasen.rorysmodcore.RorysModCorePlugin'
    attributes 'FMLCorePluginContainsFMLMod': 'true'
    
    attributes 'Built-By': System.getProperty('user.name')
    attributes 'Created-By': "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})"
    attributes 'Implementation-Title': project.name
    attributes 'Implementation-Version': project.version
    attributes 'Git-Hash': gitHash
    attributes 'Built-On': "${mc_version}-${forge_version}"
}

version = "${project.minecraft.version}-${project.version}"

jar {
    exclude "**/*.psd"
	includeEmptyDirs = false
	classifier = 'universal'
	manifest commonManifest
	from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
}

task deobfJar(type: Jar) {
	from sourceSets.main.output
	includeEmptyDirs = false
    exclude "**/*.psd"
	classifier = 'deobf'
	manifest commonManifest
}

task srcJar(type: Jar) {
	from sourceSets.main.allSource
    exclude "**/*.psd"
	classifier = 'sources'
	manifest commonManifest
}

artifacts {
	archives deobfJar
	archives srcJar
}
