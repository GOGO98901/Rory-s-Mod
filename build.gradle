buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

repositories {
	maven {
		name = "ic2"
		url = "http://maven.ic2.player.to/"
	}
	maven {
		name = 'CodeChicken'
		url = 'http://chickenbones.net/maven/'
	}
}

apply plugin: 'forge'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

configurations {
    embed
    compile.extendsFrom(embed)
}

dependencies {
    compile "net.industrial-craft:industrialcraft-2:${ic2_version}:api"
    
    compile "codechicken:NotEnoughItems:${mc_version}-${nei_version}:dev"
    compile "codechicken:CodeChickenCore:${mc_version}-${chickenCore_version}:dev"
    compile "codechicken:CodeChickenLib:${mc_version}-${chickenLib_version}:dev"
    
    compile files("libs/CoFHLib-[1.7.10]1.2.1-185.jar")
    
	embed files("libs/javatuples-1.2.jar")
}

version = "${mod_version}"
group = "me.roryclaasen"
archivesBaseName = "RorysMod"

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "eclipse"
	replace '$version', project.version
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }
        
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
    
    from('./') {
      include 'licence.txt'
	}
}

def commonManifest = {
	attributes 'FMLAT': 'rorysmods_at.cfg', 'FMLCorePlugin': 'me.roryclaasen.rorysmodcore.RorysModCorePlugin', 'FMLCorePluginContainsFMLMod': 'true'
}

version = "${project.minecraft.version}-${project.version}"

jar {
	includeEmptyDirs = false
	classifier = 'universal'
	manifest commonManifest
	from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
}

task deobfJar(type: Jar) {
	from sourceSets.main.output
	classifier = 'deobf'
	manifest commonManifest
}

task srcJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
	manifest commonManifest
}

artifacts {
	archives deobfJar
	archives srcJar
}
